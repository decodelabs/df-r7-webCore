html {
    @if $font-fallback-size != false {
        font-size: $font-fallback-size;
    } @else {
        font-size: $font-base-size;
    }

    font-weight: $font-base-weight;
    font-family: $font-base-family;
    color: $base-text-color;
    min-height: 100%;
    overflow-x: hidden;

    @if $font-antialias == true {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    &.no-scroll {
        overflow: hidden !important;

        body {
            overflow: hidden !important;
        }
    }
}

body {
    overflow-x: hidden;
    position: relative;
    width: 100%;
    min-width: $page-min-width;
}

@mixin applyRelativeFontSizing($maxWidth:$font-scale-threshold) {
    $divisions: ($font-base-size / 1px) - ($font-min-size / 1px);

    @if $font-scale-crossover != false {
        $expDivisions: floor(($maxWidth - $font-scale-crossover) / $font-scale-region);

        html {
            font-size: $font-base-size + $expDivisions - 1;
        }

        @for $i from 1 through ($expDivisions - 1) {
            @media only screen and (max-width: #{$maxWidth - ($i * $font-scale-region)}) {
                html {
                    font-size: #{$font-base-size + ($expDivisions - ($i + 1))};
                }
            }
        }

        $divisionWidth: (($font-scale-crossover - 600px) / $divisions);

        @for $i from 1 through $divisions {
            @media only screen and (max-width: #{$font-scale-crossover - (($i - 1) * $divisionWidth)}) {
                html {
                    font-size: #{$font-base-size - $i};
                }
            }
        }
    } @else {
        $divisionWidth: ($maxWidth - 600px / $divisions);

        @for $i from 1 through $divisions {
            @media only screen and (max-width: #{$maxWidth - ($i * $divisionWidth)}) {
                html {
                    font-size: #{$font-base-size - $i};
                }
            }
        }
    }
}

@if $font-scale == true {
    @include applyRelativeFontSizing();
}

iframe[seamless] {
    border: none;
}

.readable {
    max-width: 40em;

    img {
        max-width: 100%;
    }
}

.positive { color: $positive-color; }
.negative { color: $negative-color; }
.transitive { color: $transitive-color; }
.informative { color: $informative-color; }
.operative { color: $operative-color; }

* {
    line-height: $font-line-height;
}

a {
    padding: 0;

    &.color-block {
        padding-left: 0.4em;
        padding-right: 0.4em;
        color: #FFF !important;
        background: #F1AB3A;
    }
}


.priority-trivial { color: green !important; }
.priority-low { color: #8DAD00 !important; }
.priority-medium { color: #8F7310 !important; }
.priority-high { color: #BE3900 !important; }
.priority-critical { color: red !important; }


.disabled {
    color: $disabled-color;
    opacity: 0.7;
    filter: grayscale(100%);
}

a.disabled {
    cursor: not-allowed;

    &:link, &:active, &:hover, &:visited {
        color: #777;
        opacity: 0.7;
    }

    &:active {
        pointer-events: none;
    }
}

.na {
    color: $disabled-color;
    opacity: 0.7;
}

.error {
    color: $error-color;
}

.success {
    color: $success-color;
}

.info {
    color: $informative-color;
}

.warning {
    color: $warning-color;
}

.debug {
    color: $debug-color;
}

a.active {
    font-weight: bold;
}

.inactive {
    opacity: 0.4;
}

.hidden {
    display: none;
}

.locked {
    color: $warning-color;
}

.unlocked {
    color: $success-color;
}


span.numeric {
    font-family: monospace;

    .value {
    }

    .unit {
        opacity: 0.5;
        padding-left: 0.2em;
    }
}